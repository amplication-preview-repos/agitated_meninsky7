/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Battle } from "./Battle";
import { BattleCountArgs } from "./BattleCountArgs";
import { BattleFindManyArgs } from "./BattleFindManyArgs";
import { BattleFindUniqueArgs } from "./BattleFindUniqueArgs";
import { CreateBattleArgs } from "./CreateBattleArgs";
import { UpdateBattleArgs } from "./UpdateBattleArgs";
import { DeleteBattleArgs } from "./DeleteBattleArgs";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { BattleService } from "../battle.service";
@graphql.Resolver(() => Battle)
export class BattleResolverBase {
  constructor(protected readonly service: BattleService) {}

  async _battlesMeta(
    @graphql.Args() args: BattleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Battle])
  async battles(@graphql.Args() args: BattleFindManyArgs): Promise<Battle[]> {
    return this.service.battles(args);
  }

  @graphql.Query(() => Battle, { nullable: true })
  async battle(
    @graphql.Args() args: BattleFindUniqueArgs
  ): Promise<Battle | null> {
    const result = await this.service.battle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Battle)
  async createBattle(@graphql.Args() args: CreateBattleArgs): Promise<Battle> {
    return await this.service.createBattle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Battle)
  async updateBattle(
    @graphql.Args() args: UpdateBattleArgs
  ): Promise<Battle | null> {
    try {
      return await this.service.updateBattle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Battle)
  async deleteBattle(
    @graphql.Args() args: DeleteBattleArgs
  ): Promise<Battle | null> {
    try {
      return await this.service.deleteBattle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Attendance], { name: "attendances" })
  async findAttendances(
    @graphql.Parent() parent: Battle,
    @graphql.Args() args: AttendanceFindManyArgs
  ): Promise<Attendance[]> {
    const results = await this.service.findAttendances(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
