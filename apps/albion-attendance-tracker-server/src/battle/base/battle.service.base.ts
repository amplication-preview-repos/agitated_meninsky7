/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Battle as PrismaBattle,
  Attendance as PrismaAttendance,
} from "@prisma/client";

export class BattleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BattleCountArgs, "select">): Promise<number> {
    return this.prisma.battle.count(args);
  }

  async battles<T extends Prisma.BattleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BattleFindManyArgs>
  ): Promise<PrismaBattle[]> {
    return this.prisma.battle.findMany<Prisma.BattleFindManyArgs>(args);
  }
  async battle<T extends Prisma.BattleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BattleFindUniqueArgs>
  ): Promise<PrismaBattle | null> {
    return this.prisma.battle.findUnique(args);
  }
  async createBattle<T extends Prisma.BattleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BattleCreateArgs>
  ): Promise<PrismaBattle> {
    return this.prisma.battle.create<T>(args);
  }
  async updateBattle<T extends Prisma.BattleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BattleUpdateArgs>
  ): Promise<PrismaBattle> {
    return this.prisma.battle.update<T>(args);
  }
  async deleteBattle<T extends Prisma.BattleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BattleDeleteArgs>
  ): Promise<PrismaBattle> {
    return this.prisma.battle.delete(args);
  }

  async findAttendances(
    parentId: string,
    args: Prisma.AttendanceFindManyArgs
  ): Promise<PrismaAttendance[]> {
    return this.prisma.battle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendances(args);
  }
}
